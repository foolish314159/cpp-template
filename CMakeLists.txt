cmake_minimum_required(VERSION 3.0.0)
project(cpp-template VERSION 0.1.0)

# Code coverage compile option for GNU compiler
if (CMAKE_COMPILER_IS_GNUCXX)
  add_compile_options(--coverage -O0)
endif()

# Main programm, not necessary for a library
include_directories(include)
set(SOURCES src/main.cpp src/dummy.cpp)
add_executable(cpp-template ${SOURCES})
# Code coverage link library for GNU compiler
if (CMAKE_COMPILER_IS_GNUCXX)
  target_link_libraries(cpp-template --coverage)
endif()


# Enable testing with CTest
include(CTest)
enable_testing()

# Download and unpack googletest at configure time
configure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt)
execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
  RESULT_VARIABLE result
  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
if(result)
  message(FATAL_ERROR "CMake step for googletest failed: ${result}")
endif()
execute_process(COMMAND ${CMAKE_COMMAND} --build .
  RESULT_VARIABLE result
  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
if(result)
  message(FATAL_ERROR "Build step for googletest failed: ${result}")
endif()

# Prevent overriding the parent project's compiler/linker
# settings on Windows
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

# Add googletest directly to our build. This defines
# the gtest and gtest_main targets.
add_subdirectory(${CMAKE_BINARY_DIR}/googletest-src
                 ${CMAKE_BINARY_DIR}/googletest-build
                 EXCLUDE_FROM_ALL)

# The gtest/gtest_main targets carry header search path
# dependencies automatically when using CMake 2.8.11 or
# later. Otherwise we have to add them here ourselves.
if (CMAKE_VERSION VERSION_LESS 2.8.11)
  include_directories("${gtest_SOURCE_DIR}/include")
endif()

# Now simply link against gtest or gtest_main as needed. Eg
add_executable(dummy_test test/dummy_test.cpp src/dummy.cpp)
target_link_libraries(dummy_test gtest_main)
add_test(NAME dummy_test COMMAND dummy_test)
# Code coverage link library for GNU compiler
if (CMAKE_COMPILER_IS_GNUCXX)
  target_link_libraries(cpp-template --coverage)
endif()
